Terminals:
variable string number + - % * / & ^ > < ! = ( ) ' " print for in range , from import as with open : True False None is not while if elif else def return class break pass continue raise Exception TypeError SyntaxError RuntimeError
Variables:
S VAR VAL STRING NUMBER OPARITH OP PRINT FORHEAD VRANGE FUNCTION VFUNCTION FOR IMPORT WITH OPCOMP BOOLEAN NONE OPLOGIC OPIDENTITY WHILE COMP IF ELIF ELSE DEF VDEF VRET CLASS VCLASS BREAK PASS CONTINUE RAISE EXCP COMPOPRT
Productions:
S -> S S | VAR = VAL | VAR + = STRING | VAR OPARITH = NUMBER | PRINT | FOR | IMPORT | WITH | WHILE | IF | DEF | CLASS;
VAR -> variable | VCLASS;
VAL -> VAR | STRING | NUMBER | ARRAY | FUNCTION | BOOLEAN | NONE | VCLASS ;
STRING -> STRING + STRING | ' string ' | " string " | ' string ' + ' string ' | " string " + " string " | " string " + ' string ' | ' string ' + " string " | ( STRING );
NUMBER -> NUMBER OPARITH NUMBER | number | number OPARITH number | number * * number | number / / number | number > > number | number < < number | ( NUMBER );
OPARITH -> + | - | * | / | %;
OPCOMP -> < | > | !;
OP -> OPARITH | & | ^ | OPCOMP;
PRINT -> print ( VAL ) | print ( );
FORHEAD -> for VAR in range ( VRANGE ) | for VAR in VAL;
VRANGE -> VAL , VAL | VAL | VAL , VAL , VAL;
FUNCTION -> VAR ( VFUNCTION ) | FUNCTION ( FUNCTION );
VFUNCTION -> VFUNCTION , VFUNCTION | VAL;
FOR -> FORHEAD : S;
BOOLEAN -> True | False;
NONE -> None;
OPLOGIC -> and | or;
OPIDENTITY -> is | is not | in;
IMPORT -> from VAR import VAR | from VAR import * | import VAR | import VAR as VAR | from VAR import VAR as VAR;
WITH -> with open ( VAL ) as VAR : S;
WHILE -> while COMP : S;
COMP -> VAR | ( COMP ) | COMP OPLOGIC COMP | COMPOPRT OPCOMP COMPOPRT | COMPOPRT OPCOMP = COMPOPRT | COMPOPRT = = COMPOPRT | not VAR | not COMP | COMPOPRT OPIDENTITY COMPOPRT;
COMPOPRT -> COMPOPRT OPARITH COMPOPRT | VAL | VAL OPARITH VAL | VAL * * VAL | VAL / / VAL | VAL > > VAL | VAL < < VAL | ( COMPOPRT );
EXCP -> Exception | TypeError | SyntaxError | RuntimeError;
RAISE -> raise EXCP ( STRING ) | raise ( STRING ) | raise ( );
BREAK -> break;
PASS -> pass;
CONTINUE -> continue;
IF -> if COMP : S | IF ELIF | IF ELSE | IF CONTINUE | if COMP : CONTINUE | IF BREAK | if COMP : BREAK | IF PASS | if COMP : PASS | | IF RAISE | if COMP : RAISE; 
ELIF -> elif COMP : S | ELIF ELIF | ELIF ELSE;
ELSE -> else : S;
DEF -> def VAR ( VDEF ) : S return VRET | def VAR ( VDEF ) : S | def VAR ( ) : S return VRET | def VAR ( ) : S;
VDEF -> VDEF , VDEF | variable | VAR = VAL;
VRET -> VRET , VRET | variable | COMP | ( VRET );
CLASS -> class VAR : S | class ( VAR ) : S;
VCLASS -> VCLASS . VCLASS | variable